import javax.swing.plaf.synth.SynthSeparatorUI;

class BaseballException extends Exception{}
class Foul extends BaseballException{}
class Strike extends BaseballException{}
class UnpireArgument extends BaseballException{}

abstract class Inning{
	public Inning() throws BaseballException{}
	public void event () throws BaseballException{}
	public abstract void atBat() throws Strike,Foul;
	public void walk(){}
//	public void f() throws UnpireArgument{}
}

class StormException extends Exception{}
class RainedOut extends StormException{}
class PopFoul extends Foul{}

interface Storm{
	public void event() throws RainedOut;
	public void rainHard() throws RainedOut;
	public void f() throws UnpireArgument;
}
public class StormyInning extends Inning implements Storm{
	public StormyInning() throws RainedOut,BaseballException{}
	public StormyInning(String s) 	throws Foul,BaseballException{}
//	void walk() throws PopFoul{}
//	public void event() throws RainedOut{}
	public void rainHard() throws RainedOut{}
	public void event(){}
	public void atBat() throws PopFoul{}
	public void f() {}
	public static void main(String args[]){
		try{
			StormyInning si=new StormyInning();
			si.atBat();
		}catch(PopFoul e){
			System.out.println("pop foul");
		}catch(RainedOut e){
			System.out.println("rained out");
		}catch (BaseballException  e) {
			System.out.println("Generic baseball exception");
		}
		try{
			Inning i=new StormyInning();
			i.atBat();
		}catch(Strike e){
			System.out.println("Strike");
		}catch (Foul e) {
			System.out.println("Foul");
		}catch (RainedOut e) {
			System.out.println("Rainout");
		}catch (BaseballException e) {
			System.out.println("BaseballException");
		}
	}
	
}
